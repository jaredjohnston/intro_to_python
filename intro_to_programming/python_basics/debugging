def find_first_nonzero_among(numbers):
    for n in numbers:
        if n != 0:
            return n

# find_first_nonzero_among(0, 0, 1, 0, 2, 0) 
# Function invocation. TypeError: find_first_nonzero_among() takes 1 positional argument but 6 were given.

# find_first_nonzero_among(1)
# Function invocation. TypeError: int object is not iterable. 

find_first_nonzero_among([0, 0, 1, 0, 2, 0]) # Solution. The functional call pass numbers in a single argument (list or tuple), not as separate arguments.
find_first_nonzero_among([1]) # solution. Function expects an iterable, not an integer.


import random

def predict_weather():
    sunshine = random.choice([True, False]) # Replaced str 'True', 'False' to use booleans.

    if sunshine:
        print("Today's weather will be sunny!")
    else:
        print("Today's weather will be cloudy!")


def multiply_by_five(n):
    return n * 5

print("Hello! Which number would you like to multiply by 5?")
number = int(input("Enter a number:")) # convert user input from a str to int for arithmetic operation

print(f"The result is {multiply_by_five(number)}!")


pets = { 'cat': 'pepe', 'dog': ['sparky', 'fido'], 'fish': 'oscar' }

pets['dog'].append('bowser')

print(pets)

# pets['dog'] returned value is a list so you can use list.append method to add a new element


def get_quote(person):
    if person == 'Yoda':
        return 'Do. Or do not. There is no try.' # added return statements. Without return statements the function will implicitly return None.
    if person == 'Confucius':
        return 'I hear and I forget. I see and I remember. I do and I understand.'
    if person == 'Einstein':
        return 'Do not worry about your difficulties in Mathematics. I can assure you mine are still greater.'
    else:
        return 'Sorry, no matches found.'

print('Confucius says:')
print('"' + get_quote('Confucius') + '"')


numbers = []

for i in range(1,6): # range(5) will print 0, 1, 2, 4 not 1, 2, 3, 4, 5.
    numbers.append(i)

print(numbers)

info = {'name': 'Srdjan', 'age': 38}

print(info.get('city', 'Unknown')) # print(info['city']) will raise an error. Use dict.get method to stipulate 'Unknown' instead.